rm(list = ls())

library(shiny)
library(tidyverse)
library(lubridate)
library(plotly)
library(bslib)
library(shinyWidgets)
library(shinydashboard)
library(shinythemes)

data <- read.csv("class_data/netflix_titles.csv")

#making seperate variables for Movie and TV ratings
movie_rating <- data %>%
  filter(type == "Movie") %>%
  mutate(rating_level = factor(rating, levels = c("G", "PG", "PG-13","R"))) %>%
  group_by(rating_level) %>%
  summarise(count = n())

tv_rating <- data %>%
  filter(type == "TV Show") %>%
  mutate(rating_level = factor(rating, levels = c("TV-Y","TV-Y7", "TV-G", "TV-PG", "TV-14", "TV-MA"))) %>%
  group_by(rating_level) %>%
  summarise(count = n())

#making the date column standard
data2 <- data %>% mutate(date_added=mdy(date_added))

#separating year from date
year <- format(data2$date_added, "%Y")

ratings <- data2 %>% 
  select( rating) %>% 
  drop_na() %>% 
  group_by( rating) %>% 
  summarise(count = n())
# data for the linegraph of first tab

lineplotdata <- data2 %>% 
  mutate(year = year) %>%  
  count(type, year, name = "Number_of_Shows")



########### Data to find which part of the year produces most shows #########
mnths <- lubridate::month(data2$date_added) 

datawithmonth <- data2 %>% mutate(month = mnths) %>% 
  count(month, name= "Number_of_Shows") %>% 
  drop_na() %>% 
  mutate(month_name = month.abb, month = factor(month, labels = month.abb))

country_names <- data2 %>% separate_rows(country, sep = ", ") %>% 
  select(country) %>% 
  drop_na()%>% 
  unique()


data6 <-  data2 %>% group_by(director) %>%  summarise(n = n()) %>%  arrange(desc(n)) %>% head(30)


# Define UI for application 
ui <- navbarPage(
  
  # Application title
  title = "Netflix Dashboard",
  
  #theme = bslib::bs_theme(bootswatch = "cyborg"),
  #theme = shinytheme("united"),
  
  theme = bs_theme(
    bg = "white", 
    fg = "black",
    primary = "#0077b6",
    secondary = "#d90429",
    
    base_font = font_google("Prompt"),
    code_font = font_google("JetBrains Mono")),
  
  
  
  ##################################################
  tabPanel(
    "First tab",
    sidebarLayout(
      sidebarPanel(
        plotlyOutput("monthbar")
      ),
      mainPanel(
        fluidRow(
          selectInput(
            "country",
            "Country",
            choices = c("All", unique(country_names$country)),
            width = "40%"
          ),
          plotlyOutput("linegraph1", width = "100%")
        )
      )
    )
  ),
  tabPanel(
    "Second tab",
    fluidPage(
      titlePanel("Netflix Dashboard"),
      sidebarLayout(
        sidebarPanel(
          radioButtons(
            "pie_chart_type",
            "Choose chart type:",
            choices = c("Movie ratings" = "movie", "TV show ratings" = "tv"),
            selected = "movie"
          )
        ),
        mainPanel(
          fluidRow(
            column(
              width = 6,
              plotlyOutput("pie_charts")
            )
          )
        )
      )
    )
  ),
)

server <- function(input, output) {
  
  
  ##First Tab##
  ##Barplot##
  
  output$monthbar <- renderPlotly({
    
    
    p <-  ggplot(datawithmonth, aes(x= month, y= Number_of_Shows)) +
      geom_bar(aes(fill= month_name), stat= "identity", size = 2)+
      coord_flip()+
      theme_minimal()+
      labs(title = "Number of Shows by Month", x= "Month", y = "")+
      theme(panel.grid = element_blank(),
            plot.title = element_text(hjust = 0.5), 
            panel.background = element_rect(fill="white"), 
            plot.background = element_rect(fill= "white"), 
            axis.text.x = element_text(size = 12, face = "bold", colour = "#B19CD9"),
            text = element_text(colour="black", size =15) )
    
    ggplotly(p)  
    
  })
  
  ##Line Graph##
  
  output$linegraph1 <- renderPlotly({
    
    if(input$country == "All"){
      
      
      p <- ggplot(lineplotdata, aes(x = year, group =  type, y = Number_of_Shows, color = type)) +
        geom_line(size = 1) +
        geom_point(size = 3)+
        labs(title ="Number of Movies/Shows Produced all over the World", x = "Year", y = "Amount of Movies/Shows Produced", color = "type") +
        theme_minimal()+
        theme(panel.grid = element_blank(),
              plot.title = element_text(hjust = 0.5), 
              panel.background = element_rect(fill="white"), 
              plot.background = element_rect(fill= "white"), 
              axis.text.x = element_text(size = 12, face = "bold", colour = "#B19CD9"),
              text = element_text(colour="black", size =15)) 
      ggplotly(p)}
    
    
    else
      
      
    {
      
      data5 <- data2 %>% separate_rows(country, sep= ", ") %>% group_by(country) %>% filter(country == input$country)
      year <- format(data5$date_added, "%Y")
      lineplotdata <- data5 %>% mutate(year = year) %>%  count(type, year, name = "Number_of_Shows")
      
      
      p <- ggplot(lineplotdata, aes(x = year, group =  type, y = Number_of_Shows, color = type)) +
        geom_line(size = 1) +
        geom_point(size = 3)+
        labs(x = "Year", y = "Amount of Movies/Shows produced", color = "type") +
        theme_minimal()+
        labs(title =paste("Number of Movies/Shows Produced in ", input$country), x = "Year", y = "Amount of Movies/Shows Produced", color = "type") +
        theme_minimal()+
        theme(panel.grid = element_blank(),
              plot.title = element_text(hjust = 0.5), 
              panel.background = element_rect(fill="white"), 
              plot.background = element_rect(fill= "white"), 
              axis.text.x = element_text(size = 12, face = "bold", colour = "#B19CD9"),
              text = element_text(colour="black", size =15)) 
      ggplotly(p)
      
    }
  })

  #Second tab
  output$pie_charts <- renderPlotly({
    if (input$pie_chart_type == "movie") {
      p <- plot_ly(data = movie_rating, labels = ~rating_level, values = ~count,
                   type = "pie",
                   marker = list(colors = c("#D7191C", "#FDAE61", "#ABDDA4", "#2B83BA")),
                   hole = 0.6) %>%
        layout(title = "Distribution of Movie Ratings",
               margin = list(l = 50, r = 50, t = 50, b = 50),
               annotations = list(text = paste0("Total Count: ", sum(movie_rating$count)),
                                  font = list(size = 10),
                                  showarrow = FALSE,
                                  x = 0.5, y = 0.5),
               legend = list(
                 orientation = "h",
                 x = 0.5, y = -0.2
               ))
    } else if (input$pie_chart_type == "tv") {
      p <- plot_ly(data = tv_rating, labels = ~rating_level, values = ~count,
                   type = "pie",
                   marker = list(colors = c("#D7191C", "#FDAE61", "#ABDDA4", "#2B83BA")),
                   hole = 0.6) %>%
        layout(title = "Distribution of TV Show Ratings",
               margin = list(l = 50, r = 50, t = 50, b = 50),
               annotations = list(text = paste0("Total Count: ", sum(tv_rating$count)),
                                  font = list(size = 10),
                                  showarrow = FALSE,
                                  x = 0.5, y = 0.5),
               legend = list(
                 orientation = "h",
                 x = 0.5, y = -0.2
               ))
    }
    p
  })
}


shinyApp(ui = ui, server = server)
